// <auto-generated />
using System;
using BSPracaInzynierska.Server.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BSPracaInzynierska.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221212085713_ChangeTable2")]
    partial class ChangeTable2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BSPracaInzynierska.Shared.LeaderBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("gameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("playerTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaderBoard");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserHost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("gameTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("blindGuessSongs")
                        .HasColumnType("int");

                    b.Property<int>("blindGuessTime")
                        .HasColumnType("int");

                    b.Property<long>("favourites")
                        .HasColumnType("bigint");

                    b.Property<int>("lightningRoundSongs")
                        .HasColumnType("int");

                    b.Property<int>("lightningRoundTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MusicPlaylists");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SongDuration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTChanelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTVideoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTVidoeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("currentGameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("currentGameId");

                    b.ToTable("Uzytkownicy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("334c644f-367d-426f-b2ca-bfbd279858f3"),
                            Email = "admin",
                            PasswordHash = new byte[] { 180, 195, 99, 116, 110, 46, 191, 6, 123, 18, 88, 49, 100, 240, 31, 37, 254, 125, 236, 187, 90, 69, 233, 81, 194, 24, 33, 55, 128, 49, 250, 178, 204, 105, 209, 254, 238, 132, 75, 227, 170, 250, 240, 152, 41, 46, 138, 232, 243, 57, 202, 202, 42, 143, 175, 34, 3, 17, 53, 196, 64, 93, 230, 98 },
                            PasswordSalt = new byte[] { 119, 174, 14, 18, 167, 99, 251, 216, 10, 196, 152, 8, 136, 130, 18, 154, 255, 241, 175, 75, 191, 187, 121, 222, 180, 78, 158, 209, 194, 140, 198, 203, 67, 152, 32, 55, 254, 240, 126, 61, 224, 246, 18, 150, 42, 107, 84, 57, 99, 7, 86, 6, 73, 67, 176, 73, 236, 36, 223, 165, 76, 159, 182, 111, 215, 161, 244, 115, 85, 13, 86, 20, 104, 150, 138, 82, 198, 130, 33, 76, 144, 13, 63, 249, 175, 234, 123, 239, 253, 112, 190, 91, 112, 182, 63, 49, 74, 68, 149, 145, 104, 40, 69, 239, 79, 41, 248, 98, 63, 236, 127, 153, 110, 204, 121, 157, 53, 165, 41, 147, 233, 121, 178, 171, 244, 39, 68, 191 },
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MusicPlaylistUser", b =>
                {
                    b.Property<Guid>("FavouritePlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersFavouritesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavouritePlaylistsId", "UsersFavouritesId");

                    b.HasIndex("UsersFavouritesId");

                    b.ToTable("MusicPlaylistUser");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.LeaderBoard", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("LeaderBoards")
                        .HasForeignKey("PlaylistId");

                    b.HasOne("BSPracaInzynierska.Shared.User", "Player")
                        .WithMany("Leaders")
                        .HasForeignKey("UserId");

                    b.Navigation("Player");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("CurrentGames")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.User", "Creator")
                        .WithMany("MusicPlaylists")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.Song", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MultiGame", "CurrentGame")
                        .WithMany("Players")
                        .HasForeignKey("currentGameId");

                    b.Navigation("CurrentGame");
                });

            modelBuilder.Entity("MusicPlaylistUser", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", null)
                        .WithMany()
                        .HasForeignKey("FavouritePlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSPracaInzynierska.Shared.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavouritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.Navigation("CurrentGames");

                    b.Navigation("LeaderBoards");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.Navigation("Leaders");

                    b.Navigation("MusicPlaylists");
                });
#pragma warning restore 612, 618
        }
    }
}
