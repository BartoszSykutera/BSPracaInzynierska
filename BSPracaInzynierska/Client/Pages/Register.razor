@page "/register"
@inject ILoginService loginService
@inject NavigationManager navigationManager



<div class="container mx-auto">
    <div class="row">
        <div class="col-3"></div>
        <div class="col-6">
            <h3 class="text-center">Register</h3>
            <br />
            <input type="text" @bind-value="@userName" class="form-control" placeholder="Username" />
            <br />
            <input type="text" @bind-value="@userEmail" class="form-control" placeholder="Email" />
            <br />
            <input type="password" @bind-value="@userPassword" class="form-control" placeholder="Password" />
            <br />
            <button class="btn btn-primary" @onclick="RegisterUser">Sign Up</button>
            <br />
            <p class="text-danger">@loginService.errorMess</p>
        </div>
        <div class="col-3"></div>
    </div>
</div>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string userName = string.Empty;
    private string userPassword = string.Empty;
    private string userEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        loginService.errorMess = string.Empty;
        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/profile", true);
        }
    }

    public async Task RegisterUser()
    {
        loginService.errorMess = string.Empty;
        await loginService.Register(userName, userPassword);
        await InvokeAsync(() => StateHasChanged());
        if(loginService.errorMess == string.Empty)
        {
            navigationManager.NavigateTo("/login", true);
        }
    }


}