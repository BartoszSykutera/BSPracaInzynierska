@page "/lightingRounds/{Id}/{gameDuration}/{songToGuess}"
@page "/lightingRounds/rankedGame/{Id}"
@inject IGameOneService gameService
@inject IJSRuntime JsRuntime
@inject NavigationManager navigationManager
@implements IDisposable

<div class="container mx-auto text-center">
    <h1 class="font-weight-bold">Lightning Rounds</h1>
    <br />
    <div hidden>
        <div id="player"></div>
    </div>
    
    <br />

    @if (isGameReady == false)
    {
        @if (isGameOver == false)
        {
            <button class="btn btn-success btn-lg w-100" @onclick="() => Load(gameService.songs[0].YTVidoeId)" type="button">Play</button>
        }
        else
        {
            <h2 class="font-weight-bold">Your total score: @gameService.totalPoints</h2>
            <br />
            <div class="row">
                <div class="col-sm-12 text-center">
                    <button class="btn btn-danger btn-md center-block" Style="width: 150px;" @onclick="End">End Game</button>
                    <button class="btn btn-primary btn-md center-block" Style="width: 150px;" @onclick="PlayAgain">Play again</button>
                </div>
            </div>
            <br />
            <table class="table  table-striped" style="width: 70%; margin: auto">
                <thead>
                    <tr class="table-danger">
                        <th scope="col">Round</th>
                        <th scope="col">Time</th>
                        <th scope="col">Result</th>
                        <th scope="col">Answer</th>
                        <th scope="col">Points</th>
                    </tr>
                </thead>
                @foreach (var record in gameService.listOfTimes)
                {
                    <tbody>
                        <tr>

                            <th scope="row">@(gameService.listOfTimes.FindIndex(t => t.Id == record.Id) + 1)</th>
                            <td>@record.timeStamp</td>
                            <td>
                                @if (record.isCorrect == true)
                                {
                                    <span class="oi oi-check" style="color: #32CD32; font-size:45px;" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span class="oi oi-x" style="color: #ff1a1a; font-size:45px;" aria-hidden="true"></span>
                                }
                            </td>
                            <td>
                                @record.correctAnswer
                            </td>
                            <td>
                                @record.Points
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        }
    }
    else
    {
        @if(songToGuess == null)
        {
            <h4 style="text-align: center;">Track @(currentIndex + 1)/@gameService.rankedPlaylist.lightningRoundSongs</h4>
        }else{
            <h4 style="text-align: center;">Track @(currentIndex + 1)/@songToGuess</h4>
        }
        <br />
        @if (isRoundOver == true)
        {
            <button class="btn btn-warning btn-lg w-100" @onclick="() => Next()" type="button">Next</button>
        }
        <br />
        <br />
        <br />
        @if (isPlayerReady == true)
        {
            <div class="container  mx-auto">
                <div class="row">
                    <div class="col">
                    </div>
                    <div class="col-8">
                        <h1 style="text-align: center;">Time left: @time</h1>
                        <br />
                        <div class="progress">
                            <div class="progress-bar bg-warning" role="progressbar" style="width: @progressValue" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <br />
                        <br />
                        @foreach (var answer in answerList)
                        {
                            @if (answer.isDisables == false)
                            {
                                <button style="width:100%;" type="button" @onclick="() => Guess(answer)" class="btn btn-@answer.buttonColor btn-lg w-100">@answer.answer</button>
                            }
                            else
                            {
                                <button style="width:100%;" type="button" class="btn btn-@answer.buttonColor btn-lg w-100">@answer.answer</button>
                            }

                            <br />
                            <br />
                        }
                    </div>
                    <div class="col">
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }

    }
</div>



@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string gameDuration { get; set; }
    [Parameter]
    public string songToGuess { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    public bool isGameOver = false;
    public bool isRoundOver = false;
    public bool isGameReady = false;
    public bool isPlayerReady = false;
    public class answersAvailable
    {
        public string answer;
        public string buttonColor = "secondary";
        public bool isCorrect;
        public bool isDisables = false;
    };
    Song currentlyPlaying;
    int currentIndex;
    Guid currentUserId = Guid.Empty;
    public List<answersAvailable> answerList = new List<answersAvailable>();
    private DotNetObjectReference<GameTypeOne>? _objRef;

    //timer parameters
    double elapsedTime = 0;
    double gameTime = 0;
    string time = "00.0";
    public string progressValue = "100%";
    System.Timers.Timer timer = new System.Timers.Timer(100);
    bool isTimerRunning = true;

    protected override async Task OnParametersSetAsync()
    {
        isGameReady = false;
        currentIndex = 0;
        await BundleAndSendDotNetHelper();
        await JsRuntime.InvokeVoidAsync("initialize");
        var authState = await authenticationState;
        var user = authState.User;
        currentUserId = new Guid(user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value);
        if (gameDuration == null || songToGuess == null)
        {
            await gameService.GetRankedGame(new Guid(Id));
            elapsedTime = gameService.rankedPlaylist.lightningRoundTime;
            gameTime = gameService.rankedPlaylist.lightningRoundTime;
        }
        else
        {
            gameTime = Convert.ToDouble(gameDuration);
            elapsedTime = Convert.ToDouble(gameDuration);
            //elapsedTime = Int32.Parse(gameDuration);
            await gameService.GetSongs(new Guid(Id), Int32.Parse(songToGuess));
        }  
    }

    private async Task BundleAndSendDotNetHelper()
    {
        _objRef = DotNetObjectReference.Create(this);
        if (JsRuntime != null)
        {
            await JsRuntime.InvokeAsync<string>("SetDotNetHelper", _objRef);
        }
    }

    async Task Guess(answersAvailable answer)
    {
        double points = 0;
        string correctAnswer = answerList.Where(a => a.isCorrect == true).FirstOrDefault().answer;
        double timeStamps = Math.Round(gameTime - elapsedTime, 2);
        if (answer.isCorrect != true)
        {
            answerList.Where(a => a.answer == answer.answer).FirstOrDefault().buttonColor = "danger";
            gameService.listOfTimes.Add(new GameAnswers { timeStamp = timeStamps, isCorrect = false, correctAnswer = correctAnswer });
        }
        else
        {
            points = 100 + timeStamps*10;
            gameService.listOfTimes.Add(new GameAnswers { timeStamp = timeStamps, isCorrect = true, correctAnswer = correctAnswer, Points = points});
        }
        answerList.ForEach(a => a.isDisables = true);
        answerList.Where(a => a.isCorrect == true).FirstOrDefault().buttonColor = "success";

        await JsRuntime.InvokeVoidAsync("pauseVideo");
        StopTimer();
        isRoundOver = true;
    }

    async Task generateAnswers()
    {
        await gameService.GetAnswers(currentlyPlaying.Title);
        answerList.Clear();
        gameService.currentAnswers.ForEach(a =>
        {
            if (a != currentlyPlaying.Title)
                answerList.Add(new answersAvailable { answer = a, isCorrect = false });
            else
                answerList.Add(new answersAvailable { answer = a, isCorrect = true });

        });
    }

    [JSInvokable]
    public void ShowAnswers()
    {
        isPlayerReady = true;
        StateHasChanged();
    }

    async Task Load(string songId)
    {
        await JsRuntime.InvokeVoidAsync("ready", songId);
        currentlyPlaying = gameService.songs.First();

        await generateAnswers();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task Next()
    {
        progressValue = "100%";
        if (currentIndex < (gameService.songs.Count() - 1))
        {
            currentIndex++;
            isPlayerReady = false;
            currentlyPlaying = gameService.songs[currentIndex];
            if (gameDuration == null || songToGuess == null)
                elapsedTime = gameService.rankedPlaylist.lightningRoundTime;
            else
                elapsedTime = Convert.ToDouble(gameDuration);
            elapsedTime = Math.Round(elapsedTime, 2);
            await generateAnswers();
            await JsRuntime.InvokeVoidAsync("loadNew", currentlyPlaying.YTVidoeId);
        }
        else
        {
            isGameOver = true;
            isGameReady = false;
            gameService.listOfTimes.ForEach(t => gameService.totalPoints = gameService.totalPoints + t.Points);
            if(gameDuration == null && songToGuess == null)
            {
                gameService.SaveToLeaderBoard(currentUserId, new Guid(Id));
            }
        }
        isRoundOver = false;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task Previous()
    {
        isPlayerReady = false;
        currentIndex--;
        currentlyPlaying = gameService.songs[currentIndex];
        await generateAnswers();
        await JsRuntime.InvokeVoidAsync("loadNew", currentlyPlaying.YTVidoeId);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task Play()
    {
        await JsRuntime.InvokeVoidAsync("playVideo");
    }

    async Task Pause()
    {
        await JsRuntime.InvokeVoidAsync("pauseVideo");
        StopTimer();
    }

    [JSInvokable]
    public async Task SongReady(string URL)
    {
        if (isGameReady == false)
        {
            Play();
        }
        isGameReady = true;
        //await JsRuntime.InvokeVoidAsync("playVideo");
        StateHasChanged();
    }





    public void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (elapsedTime > 0)
        {
            elapsedTime = Math.Round(elapsedTime - 0.1, 2);
            progressValue = Math.Floor(elapsedTime / gameTime * 100).ToString();
            progressValue = progressValue + "%";
            time = elapsedTime.ToString("0.0");
        }
        else
        {
            Pause();
            timer.Enabled = false;
            isTimerRunning = false;
        }


        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    [JSInvokable]
    public void StartTimer()
    {
        timer = new System.Timers.Timer(100);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }


    public void StopTimer()
    {
        timer.Enabled = false;
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    public void End()
    {
        navigationManager.NavigateTo($"gameCreator/{Id}", true);
    }

    public void PlayAgain()
    {
        if (gameDuration == null || songToGuess == null)
        {
            navigationManager.NavigateTo($"/lightingRounds/rankedGame/{Id}", true);
        }
        else
        {
            navigationManager.NavigateTo($"lightingRounds/{Id}/{gameDuration}/{songToGuess}", true);
        }
    }
}
