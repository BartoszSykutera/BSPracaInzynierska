@page "/gameTypeOne/{Id}"
@inject IGameOneService gameService
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="container mx-auto">
    <h3>GameTypeOne</h3>
    <h1 style="text-align: center;">Your time: @elapsedTime</h1>
    <button class="btn btn-primary" @onclick="() => EndGame()" type="button">End Game</button>
    <button class="btn btn-primary" @onclick="() => Load(videoIds[0].songId)" type="button">Load</button>
    <button class="btn btn-success" @onclick="() => StartTimer()" type="button">Start</button>
    <button class="btn btn-danger" @onclick="() => StopTimer()" type="button">Stop</button>
    @if(isGameReady == true)
    {
        <button class="btn btn-success" @onclick="() => Play()" type="button">Play</button>
        <button class="btn btn-danger" @onclick="() => Pause()" type="button">Pause</button>
        <button class="btn btn-danger" @onclick="() => Next()" type="button">Next</button>
        <button class="btn btn-danger" @onclick="() => Previous()" type="button">Previous</button>
    }
    

    <br />
    <br />
    <br />
    <div id="player"></div>
</div>



@code {
    [Parameter]
    public string? Id { get; set; }
    public bool isGameReady = false;
    public class musicState
    {
        public Song song;
        public string songId;
        public bool state;
        public bool isReady;
        public string answer = string.Empty;
        public bool guessed;
        public bool showGuessStatus;
    };
    musicState currentlyPlaying;
    int currentIndex = 0;
    public List<musicState> videoIds = new List<musicState>();
    private DotNetObjectReference<GameTypeOne>? _objRef;

    //timer parameters
    int elapsedTime = 30;
    System.Timers.Timer timer = new System.Timers.Timer(1000);
    bool isTimerRunning = true;

    protected override async Task OnParametersSetAsync()
    {
        await BundleAndSendDotNetHelper();
        await JsRuntime.InvokeVoidAsync("initialize");
        await gameService.GetSongs(new Guid(Id));
        gameService.songs.ForEach(s => videoIds.Add(new musicState { song = s, songId = s.YTVidoeId, state = false, isReady = false, guessed = false, showGuessStatus = false }));
    }

    private async Task BundleAndSendDotNetHelper()
    {
        _objRef = DotNetObjectReference.Create(this);
        if (JsRuntime != null)
        {
            await JsRuntime.InvokeAsync<string>("SetDotNetHelper", _objRef);
        }
    }

    async Task Load(string songId)
    {
        await JsRuntime.InvokeVoidAsync("ready", songId);
        currentlyPlaying = videoIds.First();
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async Task Next()
    {
        currentIndex++;
        currentlyPlaying = videoIds[currentIndex];
        await JsRuntime.InvokeVoidAsync("loadNew", currentlyPlaying.songId);
    }

    async Task Previous()
    {
        currentIndex--;
        currentlyPlaying = videoIds[currentIndex];
        await JsRuntime.InvokeVoidAsync("loadNew", currentlyPlaying.songId);
    }

    async Task Play()
    {
        await JsRuntime.InvokeVoidAsync("playVideo");
    }

    async Task Pause()
    {
        await JsRuntime.InvokeVoidAsync("pauseVideo");
        StopTimer();
    }

    [JSInvokable]
    public void SongReady(string URL)
    {
        isGameReady = true;
        StateHasChanged();
    }





    public void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (elapsedTime > 0)
        {
            elapsedTime--;
        }
        else
        {
            Pause();
            timer.Enabled = false;
            isTimerRunning = false;
        }


        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    [JSInvokable]
    public void StartTimer()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
        //isTimerRunning = true;
    }


    public void StopTimer()
    {
        timer.Enabled = false;
        //isTimerRunning = false;
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    async Task EndGame()
    {
        videoIds.ForEach(s =>
        {
            if (s.guessed)
            {
                gameService.correctAnswers++;
            }
        });
        await gameService.EndGame(elapsedTime);
    }




    async Task ChangeAnswer(object args, string id)
    {
        videoIds.Where(s => s.songId == id).FirstOrDefault().answer = args.ToString();
    }

    async Task GuessSong(string id)
    {
        musicState music = videoIds.Where(s => s.songId == id).FirstOrDefault();
        if (music.answer == music.song.Title)
        {
            videoIds.Where(s => s.songId == id).FirstOrDefault().guessed = true;
            gameService.availableAnswers.Remove(music.answer);
        }
        else
        {
            gameService.badAnswers++;
        }
        videoIds.Where(s => s.songId == id).FirstOrDefault().showGuessStatus = true;
    }
}
