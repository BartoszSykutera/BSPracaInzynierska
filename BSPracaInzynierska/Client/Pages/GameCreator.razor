@page "/gameCreator/{Id}"
@inject IGameCreatorService gameCreator
@inject NavigationManager navigationManager

<div>
    <h1 class="font-weight-bold">@gameCreator.playlist.PlaylistName</h1>
    <br />
    <h5>
        Description:
        @gameCreator.playlist.Description
    </h5>
    <br />
    @if (currentUserId != gameCreator.playlist.UserId)
    {
        @if (isFav == false)
        {
            <button class="btn btn-primary btn-lg" @onclick="AddToFav" type="button">Add to favourites</button>
        }
        else
        {
            <button class="btn btn-danger btn-lg" @onclick="RemoveFromFav" type="button">Remove from favourites</button>
        }
        <h5 class="font-weight-bold">Number of likes: @gameCreator.playlist.favourites</h5>
    }
    <br />
    <h4 class="font-weight-bold">Select you game mode:</h4>
    <select @onchange="(e) => ChangeGameType(e.Value)">
        <option value="blindGuess" selected>Blind Guess</option>
        <option value="lightingRounds">Lighting rounds</option>
        <option value="multiGame">Multiplayer</option>
    </select>
    <br />
    <br />
    <br />

    @if (gameType == "blindGuess")
    {

        <div class="card">
            <div class="card-header">
                <h2>Blind Guess Game</h2>
            </div>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-6">
                            <h4>What do you want to guess?</h4>
                            <select @onchange="(e) => ChangeGuessType(e.Value)">
                                <option value="Author">Author</option>
                                <option value="Title" selected>Title</option>
                            </select>
                            <br />
                            <br />
                            <h4>How many songs?</h4>
                            <input min=1 max=@gameCreator.songs.Count() style="width: 15%;" type="number" @bind-value="songToGuess" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
                            <p class="text-danger">@errorMessSong</p>
                            <h4>Duration of the game?</h4>
                            <input Min=@gameCreator.songs.Count() style="width: 15%;" type="number" @bind-value="gameDuration" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
                        </div>
                        <div class="col-6">
                            <h4>LeaderBoard</h4>
                            <table class="table  table-striped" style="width: 70%">
                                <thead>
                                    <tr class="table-warning">
                                        <th scope="col">#</th>
                                        <th scope="col">Username</th>
                                        <th scope="col">Points</th>
                                    </tr>
                                </thead>
                                @foreach (var result in gameCreator.blindGuessLeaderBoard)
                                {
                                    <tbody>
                                        <tr>

                                            <th scope="row">@(gameCreator.blindGuessLeaderBoard.FindIndex(i => i.Id == result.Id) + 1)</th>
                                            <td>@result.Player.Username</td>
                                            <td>@result.Points</td>
                                        </tr>
                                    </tbody>
                                }
                            </table>
                        </div>
                    </div>
                </div>

            </div>
            <div class="card-footer">
                <button class="btn btn-success btn-lg" @onclick="Play" type="button">Play custom game</button>
                <button class="btn btn-primary btn-lg" @onclick="PlayRanked" type="button">Play ranked game</button>
            </div>
        </div>
    }
    else if (gameType == "lightingRounds")
    {
        <div class="card">
            <div class="card-header">
                <h2>Lighting Rounds</h2>
            </div>
            <div class="card-body">

                <div class="container">
                    <div class="row">
                        <div class="col-6">

                            <h4>How many songs?</h4>
                            <input min=1 max=@gameCreator.songs.Count() style="width: 15%;" type="number" @bind-value="songToGuess" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
                            <p class="text-danger">@errorMessSong</p>
                            <h4>Duration of one round?</h4>
                            <input Min=1 max=10 style="width: 15%;" type="number" @bind-value="gameDuration" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
                        </div>
                        <div class="col-6">
                            <h4>LeaderBoard</h4>
                            <table class="table  table-striped" style="width: 70%">
                                <thead>
                                    <tr class="table-warning">
                                        <th scope="col">#</th>
                                        <th scope="col">Username</th>
                                        <th scope="col">Points</th>
                                    </tr>
                                </thead>
                                @foreach (var result in gameCreator.lightningRoundLeaderBoard)
                                {
                                    <tbody>
                                        <tr>

                                            <th scope="row">@(gameCreator.lightningRoundLeaderBoard.FindIndex(i => i.Id == result.Id) + 1)</th>
                                            <td>@result.Player.Username</td>
                                            <td>@result.Points</td>
                                        </tr>
                                    </tbody>
                                }
                            </table>
                        </div>
                    </div>
                </div>



            </div>
            <div class="card-footer">
                <button class="btn btn-success btn-lg" @onclick="Play" type="button">Play custom game</button>
                <button class="btn btn-primary btn-lg" @onclick="PlayRanked" type="button">Play ranked game</button>
            </div>
        </div>

    }
    else if (gameType == "multiGame")
    {
        <div class="card">
            <div class="card-header">
                <h2>Multiplayer</h2>
            </div>
            <div class="card-body">
                <h4>End the round when time runs out?</h4>
                <select @onchange="(e) => ChangeGuessType(e.Value)">
                    <option value="F">False</option>
                    <option value="T" selected>True</option>
                </select>
                <br />
                <br />
                <h4>How many songs?</h4>
                <input min=1 max=@gameCreator.songs.Count() style="width: 15%;" type="number" @bind-value="songToGuess" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
                <p class="text-danger">@errorMessSong</p>
                <h4>Duration of one round?</h4>
                <input Min=1 max=10 style="width: 15%;" type="number" @bind-value="gameDuration" class="form-control" placeholder="time" aria-label="time" aria-describedby="basic-addon2">
            </div>
            <div class="card-footer">
                <button class="btn btn-success btn-lg" @onclick="Play" type="button">Play with friends</button>
            </div>
        </div>

    }
    <br />
    <br />
    <div class="container mx-auto text-center">
        <h1 class="font-weight-bold">List of songs</h1>
        <table class="table  table-striped" style="width: 100%">
            <thead>
                <tr class="table-success">
                    <th scope="col">#</th>
                    <th scope="col">Title</th>
                    <th scope="col">Author</th>
                    <th scope="col">Youtube URL</th>
                </tr>
            </thead>
            @foreach (var song in gameCreator.songs)
            {
                <tbody>
                    <tr>

                        <th scope="row">@(gameCreator.songs.FindIndex(i => i.YTVidoeId == song.YTVidoeId) + 1)</th>
                        <td>@song.Title</td>
                        <td>@song.Author</td>
                        <td>
                            <a href="https://youtube.com/watch?v=@song.YTVidoeId" class="btn btn-outline-dark" target="_blank" rel="noopener noreferrer">Watch video</a>
                        </td>
                    </tr>
                </tbody>
            }
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string? gameGuess { get; set; }
    private int gameDuration { get; set; } = 30;
    private int songToGuess { get; set; }
    private string? errorMessSong { get; set; }
    private string? gameType { get; set; } = "blindGuess";
    private Guid currentUserId = Guid.Empty;
    private bool isFav = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        currentUserId = new Guid(user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value);
    }

    protected override async Task OnParametersSetAsync()
    {
        await gameCreator.GetSongs(new Guid(Id));
        isFav = await gameCreator.CheckFavourites(new Guid(Id), currentUserId);
        songToGuess = gameCreator.songs.Count();
        gameGuess = "Title";
    }
    void ChangeGuessType(object args)
    {
        gameGuess = args.ToString();
    }

    void ChangeGameType(object args)
    {
        songToGuess = gameCreator.songs.Count();
        errorMessSong = null;
        gameType = args.ToString();
        if (gameType == "blindGuess")
        {
            gameDuration = 30;
        }
        else if (gameType == "lightingRounds" || gameType == "multiGame")
        {
            gameDuration = 5;
        }
        StateHasChanged();
    }

    async Task AddToFav()
    {
        await gameCreator.AddToFavourites(currentUserId);
        isFav = true;
        await InvokeAsync(() => StateHasChanged());
    }

    async Task RemoveFromFav()
    {
        await gameCreator.RemoveFromFavourites(currentUserId);
        isFav = false;
        await InvokeAsync(() => StateHasChanged());
    }

    async Task Play()
    {
        if (songToGuess <= gameCreator.songs.Count() && songToGuess >= 0)
        {
            if (gameType == "blindGuess")
            {
                navigationManager.NavigateTo($"{gameType}/{Id}/{gameDuration.ToString()}/{songToGuess.ToString()}");
            }
            else if (gameType == "lightingRounds")
            {
                navigationManager.NavigateTo($"{gameType}/{Id}/{gameDuration.ToString()}/{songToGuess.ToString()}");
            }
            else if (gameType == "multiGame")
            {
                await gameCreator.CreateMultiGame(new Guid(Id), gameDuration, songToGuess, currentUserId);
                navigationManager.NavigateTo($"/{gameType}");
            }
        }
        else
            errorMessSong = "Wrong number of songs";
    }

    async Task PlayRanked()
    {
        if (gameType == "blindGuess")
        {
            navigationManager.NavigateTo($"{gameType}/rankedGame/{Id}");
        }
        else if (gameType == "lightingRounds")
        {
            navigationManager.NavigateTo($"{gameType}/rankedGame/{Id}");
        }
    }
}
