// <auto-generated />
using System;
using BSPracaInzynierska.Server.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BSPracaInzynierska.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221212084406_ChangeTable")]
    partial class ChangeTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BSPracaInzynierska.Shared.LeaderBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("gameType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("playerTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaderBoard");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GameCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserHost")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("gameTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("blindGuessSongs")
                        .HasColumnType("int");

                    b.Property<int>("blindGuessTime")
                        .HasColumnType("int");

                    b.Property<long>("favourites")
                        .HasColumnType("bigint");

                    b.Property<int>("lightningRoundSongs")
                        .HasColumnType("int");

                    b.Property<int>("lightningRoundTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MusicPlaylists");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SongDuration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTChanelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTVideoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YTVidoeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("currentGameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("currentGameId");

                    b.ToTable("Uzytkownicy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb043ba0-7d01-420a-a5d7-5102f0e1446e"),
                            Email = "admin",
                            PasswordHash = new byte[] { 225, 241, 208, 21, 58, 89, 112, 253, 149, 221, 45, 80, 171, 123, 13, 103, 103, 163, 68, 247, 109, 143, 164, 20, 217, 0, 203, 97, 75, 202, 193, 24, 127, 195, 252, 188, 71, 114, 80, 161, 113, 166, 167, 73, 105, 148, 202, 110, 64, 64, 190, 206, 207, 173, 232, 140, 41, 129, 68, 117, 218, 251, 179, 31 },
                            PasswordSalt = new byte[] { 143, 194, 119, 30, 224, 113, 232, 179, 33, 127, 213, 154, 72, 120, 182, 98, 173, 122, 140, 29, 39, 42, 251, 80, 129, 172, 231, 182, 190, 104, 151, 139, 17, 52, 68, 97, 63, 250, 184, 235, 105, 126, 83, 27, 136, 65, 21, 175, 194, 97, 85, 130, 183, 42, 199, 65, 247, 201, 103, 149, 204, 114, 236, 137, 80, 119, 144, 225, 125, 117, 27, 212, 218, 25, 193, 120, 54, 23, 128, 233, 241, 106, 228, 219, 190, 250, 65, 108, 31, 151, 18, 172, 38, 79, 231, 60, 182, 155, 250, 138, 213, 237, 15, 168, 199, 12, 80, 11, 25, 156, 9, 93, 72, 13, 64, 12, 211, 200, 81, 132, 237, 182, 145, 193, 54, 185, 186, 135 },
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MusicPlaylistUser", b =>
                {
                    b.Property<Guid>("FavouritePlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersFavouritesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavouritePlaylistsId", "UsersFavouritesId");

                    b.HasIndex("UsersFavouritesId");

                    b.ToTable("MusicPlaylistUser");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.LeaderBoard", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("LeaderBoards")
                        .HasForeignKey("PlaylistId");

                    b.HasOne("BSPracaInzynierska.Shared.User", "Player")
                        .WithMany("Leaders")
                        .HasForeignKey("UserId");

                    b.Navigation("Player");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("CurrentGames")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.User", "Creator")
                        .WithMany("MusicPlaylists")
                        .HasForeignKey("UserId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.Song", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", "Playlist")
                        .WithMany("Songs")
                        .HasForeignKey("PlaylistId");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MultiGame", "CurrentGame")
                        .WithMany("Players")
                        .HasForeignKey("currentGameId");

                    b.Navigation("CurrentGame");
                });

            modelBuilder.Entity("MusicPlaylistUser", b =>
                {
                    b.HasOne("BSPracaInzynierska.Shared.MusicPlaylist", null)
                        .WithMany()
                        .HasForeignKey("FavouritePlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BSPracaInzynierska.Shared.User", null)
                        .WithMany()
                        .HasForeignKey("UsersFavouritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MultiGame", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.MusicPlaylist", b =>
                {
                    b.Navigation("CurrentGames");

                    b.Navigation("LeaderBoards");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("BSPracaInzynierska.Shared.User", b =>
                {
                    b.Navigation("Leaders");

                    b.Navigation("MusicPlaylists");
                });
#pragma warning restore 612, 618
        }
    }
}
